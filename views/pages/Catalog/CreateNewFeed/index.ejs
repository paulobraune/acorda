<%- include("../../../dashboard-layout", {
    pageTitle: "Create New Feed",
    body: `
      <!-- Page Title -->
      <div class="page-title-wrapper mb-4">
        <h1 class="page-title">Create New Feed</h1>
        <p class="page-subtitle">Configure a product feed to sync your products with marketing platforms</p>
      </div>
      
      <!-- Platform Selection -->
      <div class="card mb-4">
        <div class="card-header">
          <h5 class="card-title mb-0">Select Platform</h5>
        </div>
        <div class="card-body">
          <div class="platform-card selected" data-platform="facebook">
            <div class="d-flex align-items-center">
              <div class="platform-icon me-3">
                <i class="fab fa-facebook-f"></i>
              </div>
              <div>
                <h5 class="mb-1">Facebook Feed</h5>
                <p class="text-secondary mb-0">Sync your products with Facebook Catalog for Facebook and Instagram ads</p>
              </div>
            </div>
          </div>
          
          <div class="platform-coming-soon mt-4">
            <p class="text-muted"><i class="fas fa-info-circle me-2"></i> More platform integrations coming soon</p>
          </div>
        </div>
      </div>
      
      <div class="card">
        <div class="card-body">
          <form id="feedForm" class="needs-validation" novalidate>
            <div class="mb-3">
              <label for="feedName" class="form-label">Feed Name</label>
              <input type="text" class="form-control" id="feedName" placeholder="My Facebook Product Feed" required>
              <div class="invalid-feedback">Please provide a name for your feed</div>
            </div>
            
            <div class="mb-3">
              <label for="updateFrequency" class="form-label">Update Frequency</label>
              <select class="form-select" id="updateFrequency" required>
                <option value="daily">Daily</option>
                <option value="hourly">Hourly</option>
                <option value="manual">Manual Only</option>
              </select>
              <div class="invalid-feedback">Please select an update frequency</div>
            </div>
            
            <div class="d-flex justify-content-end">
              <button type="button" class="btn btn-secondary me-2" onclick="window.location.href='/catalog/list-all-feeds'">Cancel</button>
              <button type="submit" class="btn btn-primary">Create Feed</button>
            </div>
          </form>
        </div>
      </div>

      <style>
        /* Platform card */
        .platform-card {
          border: 2px solid var(--border);
          border-radius: 0.75rem;
          padding: 1.5rem;
          transition: var(--transition);
          cursor: pointer;
        }
        
        .platform-card:hover {
          border-color: var(--primary);
          background-color: var(--surface-hover);
        }
        
        .platform-card.selected {
          border-color: var(--primary);
          background-color: rgba(var(--primary-rgb), 0.1);
        }
        
        .platform-icon {
          width: 48px;
          height: 48px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 8px;
          background-color: rgba(66, 103, 178, 0.15);
          color: #4267B2;
          font-size: 1.5rem;
        }
        
        /* Form elements */
        .form-label {
          color: var(--text-primary);
          font-weight: 500;
          margin-bottom: 0.5rem;
        }
        
        .form-control,
        .form-select {
          background-color: var(--surface-input);
          border: 1px solid var(--border);
          color: var(--text-primary);
          transition: var(--transition);
        }
        
        .form-control:focus,
        .form-select:focus {
          background-color: var(--surface-input-focus);
          border-color: var(--primary);
          box-shadow: 0 0 0 0.25rem var(--primary-shadow);
          color: var(--text-primary);
        }
        
        .form-text {
          color: var(--text-secondary);
        }
        
        .form-check-input:checked {
          background-color: var(--primary);
          border-color: var(--primary);
        }

        .form-check-input:focus {
          border-color: var(--primary);
          box-shadow: 0 0 0 0.2rem var(--primary-shadow);
        }
      </style>

      <script>
        document.addEventListener('DOMContentLoaded', function() {
          const feedForm = document.getElementById('feedForm');
          const platformCards = document.querySelectorAll('.platform-card');
          
          // Platform card selection
          platformCards.forEach(card => {
            card.addEventListener('click', function() {
              platformCards.forEach(c => c.classList.remove('selected'));
              this.classList.add('selected');
            });
          });
          
          // Form submission
          feedForm.addEventListener('submit', function(e) {
            e.preventDefault();
            if (!this.checkValidity()) {
              this.classList.add('was-validated');
              return;
            }
            
            // Get form values
            const feedName = document.getElementById('feedName').value;
            const updateFrequency = document.getElementById('updateFrequency').value;
            const platform = document.querySelector('.platform-card.selected').dataset.platform;
            
            // Create feed object
            const newFeed = {
              id: 'feed_' + Date.now(),
              name: feedName,
              platform: platform,
              productCount: 100, // Default value
              updateFrequency: updateFrequency,
              active: true, // Default to active
              createdAt: new Date().toISOString()
            };
            
            // Save to localStorage
            const feeds = JSON.parse(localStorage.getItem('feeds') || '[]');
            feeds.push(newFeed);
            localStorage.setItem('feeds', JSON.stringify(feeds));
            
            // Show success message
            showToast('success', 'Feed created successfully');
            
            // Redirect to feeds list after a short delay
            setTimeout(() => {
              window.location.href = '/catalog/list-all-feeds';
            }, 1500);
          });
          
          // Helper function to show toast notifications
          function showToast(type, message) {
            const toastEl = document.createElement('div');
            toastEl.className = \`toast align-items-center text-white bg-\${type} border-0 position-fixed bottom-0 end-0 m-3\`;
            toastEl.setAttribute('role', 'alert');
            toastEl.setAttribute('aria-live', 'assertive');
            toastEl.setAttribute('aria-atomic', 'true');
            
            toastEl.innerHTML = \`
              <div class="d-flex">
                <div class="toast-body">
                  <i class="fas fa-\${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                  \${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
              </div>
            \`;
            
            document.body.appendChild(toastEl);
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
            
            // Auto-remove after it's hidden
            toastEl.addEventListener('hidden.bs.toast', function() {
              document.body.removeChild(toastEl);
            });
          }
        });
      </script>
    `
}) %>