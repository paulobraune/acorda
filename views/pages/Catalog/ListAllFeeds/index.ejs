<%- include("../../../dashboard-layout", {
    pageTitle: "List All Feeds",
    body: `
      <!-- Page Title -->
      <div class="page-title-wrapper mb-4">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <h1 class="page-title">All Feeds</h1>
            <p class="page-subtitle">Manage your product feeds across different platforms</p>
          </div>
          <a href="/catalog/create-new-feed" class="btn btn-primary">
            <i class="fas fa-plus me-2"></i> Create New Feed
          </a>
        </div>
      </div>
      
      <!-- Feeds List Table -->
      <div class="card">
        <div class="card-header d-flex justify-content-between align-items-center">
          <h5 class="card-title mb-0">Configured Feeds</h5>
          <div style="max-width: 250px;">
            <select class="form-select" id="feedStatusFilter">
              <option value="all">All Feed Status</option>
              <option value="active">Active Feeds</option>
              <option value="inactive">Inactive Feeds</option>
            </select>
          </div>
        </div>
        <div class="card-body p-0">
          <div class="table-responsive">
            <table class="table align-middle table-hover mb-0" id="feedsTable">
              <thead>
                <tr>
                  <th class="ps-4">PLATFORM</th>
                  <th>FEED NAME</th>
                  <th>PRODUCT COUNT</th>
                  <th>STATUS</th>
                  <th>LAST UPDATED</th>
                  <th class="text-end pe-4">ACTIONS</th>
                </tr>
              </thead>
              <tbody id="feedsTableBody">
                <!-- Feeds will be listed here -->
                <tr class="no-feeds-message d-none">
                  <td colspan="6" class="text-center py-4">
                    <i class="fas fa-rss fa-2x mb-3 text-muted"></i>
                    <p>No feeds found. <a href="/catalog/create-new-feed">Create your first feed</a> to start syncing your products.</p>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>

      <!-- Feed Edit Modal -->
      <div class="modal fade" id="editFeedModal" tabindex="-1">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Edit Feed</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <form id="editFeedForm" class="needs-validation" novalidate>
                <input type="hidden" id="editFeedIndex">
                <div class="mb-3">
                  <label class="form-label">Feed Name</label>
                  <input type="text" class="form-control" id="editFeedName" required>
                  <div class="invalid-feedback">Please provide a name for your feed</div>
                </div>
                <div class="mb-3">
                  <label class="form-label">Product Count</label>
                  <input type="number" class="form-control" id="editProductCount" min="0" required>
                  <div class="invalid-feedback">Please provide a valid product count</div>
                </div>
                <div class="form-check form-switch">
                  <input class="form-check-input" type="checkbox" id="editFeedStatus">
                  <label class="form-check-label" for="editFeedStatus">Feed Active</label>
                </div>
              </form>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-primary" id="saveEditFeed">Save Changes</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Delete Confirmation Modal -->
      <div class="modal fade" id="deleteFeedModal" tabindex="-1">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Delete Feed</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
              <p>Are you sure you want to delete this feed? This action cannot be undone.</p>
              <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle me-2"></i>
                Deleting this feed will remove it from all connected platforms and may affect your product listings.
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
              <button type="button" class="btn btn-danger" id="confirmDeleteFeed">Delete Feed</button>
            </div>
          </div>
        </div>
      </div>

      <style>
        /* Platform badges */
        .platform-badge {
          display: flex;
          align-items: center;
          gap: 0.5rem;
          width: fit-content;
        }
        
        .platform-icon {
          width: 32px;
          height: 32px;
          display: flex;
          align-items: center;
          justify-content: center;
          border-radius: 6px;
        }
        
        .platform-icon.facebook {
          background-color: rgba(66, 103, 178, 0.15);
          color: #4267B2;
        }

        /* Status badges */
        .status-badge {
          font-size: 0.75rem;
          padding: 0.35rem 0.65rem;
          border-radius: 0.375rem;
        }
        
        .status-active {
          background-color: rgba(16, 185, 129, 0.15);
          color: #10B981;
        }
        
        .status-inactive {
          background-color: rgba(239, 68, 68, 0.15);
          color: #EF4444;
        }

        /* Modal styles */
        .modal-content {
          background-color: var(--surface);
          border-color: var(--border);
        }

        .modal-header {
          border-bottom-color: var(--border);
        }

        .modal-footer {
          border-top-color: var(--border);
        }

        .btn-close {
          filter: invert(1) grayscale(100%) brightness(200%);
        }

        /* Alert styling */
        .alert-warning {
          background-color: rgba(245, 158, 11, 0.15);
          color: #F59E0B;
          border-color: rgba(245, 158, 11, 0.3);
        }

        /* Empty state styling */
        .empty-state {
          padding: 3rem 1rem;
          text-align: center;
          color: var(--text-secondary);
        }

        .empty-state i {
          font-size: 3rem;
          margin-bottom: 1rem;
          opacity: 0.5;
        }

        .empty-state h4 {
          font-size: 1.5rem;
          margin-bottom: 1rem;
          color: var(--text-primary);
        }

        .empty-state p {
          max-width: 500px;
          margin: 0 auto;
        }
        
        /* Custom form select styling */
        .form-select {
          background-color: var(--surface-input);
          border: 1px solid var(--border);
          color: var(--text-primary);
          transition: border-color 0.2s ease, box-shadow 0.2s ease;
          background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23adb5bd' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        }
        
        .form-select:focus {
          border-color: var(--primary);
          box-shadow: 0 0 0 0.25rem var(--primary-shadow);
          outline: 0;
        }
        
        /* For dark theme specific styling */
        [data-theme="dark"] .form-select {
          background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23ffffff' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        }
        
        /* Action buttons styling */
        .action-btn-group {
          display: inline-flex;
          align-items: center;
        }
        
        .action-btn-group .btn {
          padding: 0.4rem 0.6rem;
          line-height: 1;
        }
      </style>

      <script>
        document.addEventListener('DOMContentLoaded', function() {
          // Load feeds from localStorage
          const feeds = JSON.parse(localStorage.getItem('feeds') || '[]');
          const feedsTableBody = document.getElementById('feedsTableBody');
          const noFeedsMessage = document.querySelector('.no-feeds-message');
          const feedStatusFilter = document.getElementById('feedStatusFilter');
          
          // Format date helper
          function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString() + ' ' + date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
          }
          
          // Render feeds in table
          function renderFeeds(feedsArray) {
            // Clear table first
            feedsTableBody.innerHTML = '';
            
            if (feedsArray.length === 0) {
              // Show empty state message
              noFeedsMessage.classList.remove('d-none');
              feedsTableBody.appendChild(noFeedsMessage);
              return;
            }
            
            // Hide empty state message
            noFeedsMessage.classList.add('d-none');
            
            // Render each feed as a table row
            feedsArray.forEach((feed, index) => {
              const row = document.createElement('tr');
              
              row.innerHTML = \`
                <td class="ps-4">
                  <div class="platform-badge">
                    <div class="platform-icon facebook">
                      <i class="fab fa-facebook-f"></i>
                    </div>
                    <span>Facebook</span>
                  </div>
                </td>
                <td>\${feed.name}</td>
                <td>\${feed.productCount}</td>
                <td>
                  <span class="status-badge \${feed.active ? 'status-active' : 'status-inactive'}">
                    \${feed.active ? 'Active' : 'Inactive'}
                  </span>
                </td>
                <td>\${formatDate(feed.updatedAt || feed.createdAt)}</td>
                <td class="text-end pe-4">
                  <div class="btn-group action-btn-group">
                    <button class="btn theme-toggle edit-feed-btn" data-index="\${index}" title="Edit Feed">
                      <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn theme-toggle delete-feed-btn" data-index="\${index}" title="Delete Feed">
                      <i class="fas fa-trash-alt"></i>
                    </button>
                  </div>
                </td>
              \`;
              
              feedsTableBody.appendChild(row);
            });
            
            // Add click event listeners for edit and delete buttons
            document.querySelectorAll('.edit-feed-btn').forEach(btn => {
              btn.addEventListener('click', handleEditFeed);
            });
            
            document.querySelectorAll('.delete-feed-btn').forEach(btn => {
              btn.addEventListener('click', handleDeleteFeed);
            });
          }
          
          // Initial render
          renderFeeds(feeds);
          
          // Filter by feed status
          feedStatusFilter.addEventListener('change', function() {
            const selectedStatus = this.value;
            
            if (selectedStatus === 'all') {
              renderFeeds(feeds);
              return;
            }
            
            const filteredFeeds = feeds.filter(feed => {
              if (selectedStatus === 'active') return feed.active;
              if (selectedStatus === 'inactive') return !feed.active;
              return true;
            });
            
            renderFeeds(filteredFeeds);
          });
          
          // Handle edit feed
          const editFeedModal = new bootstrap.Modal(document.getElementById('editFeedModal'));
          const editFeedForm = document.getElementById('editFeedForm');
          const editFeedIndex = document.getElementById('editFeedIndex');
          const editFeedName = document.getElementById('editFeedName');
          const editProductCount = document.getElementById('editProductCount');
          const editFeedStatus = document.getElementById('editFeedStatus');
          const saveEditFeedBtn = document.getElementById('saveEditFeed');
          
          function handleEditFeed(event) {
            const index = parseInt(event.currentTarget.dataset.index);
            const feed = feeds[index];
            
            // Fill form with feed data
            editFeedIndex.value = index;
            editFeedName.value = feed.name;
            editProductCount.value = feed.productCount;
            editFeedStatus.checked = feed.active;
            
            // Show modal
            editFeedModal.show();
          }
          
          // Save edit changes
          saveEditFeedBtn.addEventListener('click', function() {
            if (!editFeedForm.checkValidity()) {
              editFeedForm.classList.add('was-validated');
              return;
            }
            
            const index = parseInt(editFeedIndex.value);
            
            // Update feed data
            feeds[index].name = editFeedName.value;
            feeds[index].productCount = parseInt(editProductCount.value);
            feeds[index].active = editFeedStatus.checked;
            feeds[index].updatedAt = new Date().toISOString();
            
            // Save to localStorage
            localStorage.setItem('feeds', JSON.stringify(feeds));
            
            // Close modal and refresh table
            editFeedModal.hide();
            
            // Apply current filter after update
            const selectedStatus = feedStatusFilter.value;
            if (selectedStatus === 'all') {
              renderFeeds(feeds);
            } else {
              const filteredFeeds = feeds.filter(feed => {
                if (selectedStatus === 'active') return feed.active;
                if (selectedStatus === 'inactive') return !feed.active;
                return true;
              });
              renderFeeds(filteredFeeds);
            }
            
            // Show success message
            showToast('success', 'Feed updated successfully');
          });
          
          // Handle delete feed
          const deleteFeedModal = new bootstrap.Modal(document.getElementById('deleteFeedModal'));
          const confirmDeleteFeedBtn = document.getElementById('confirmDeleteFeed');
          let deleteIndex = -1;
          
          function handleDeleteFeed(event) {
            deleteIndex = parseInt(event.currentTarget.dataset.index);
            deleteFeedModal.show();
          }
          
          // Confirm delete
          confirmDeleteFeedBtn.addEventListener('click', function() {
            if (deleteIndex === -1) return;
            
            // Remove feed from array
            feeds.splice(deleteIndex, 1);
            
            // Save to localStorage
            localStorage.setItem('feeds', JSON.stringify(feeds));
            
            // Close modal and refresh table with current filter
            deleteFeedModal.hide();
            
            // Apply current filter after delete
            const selectedStatus = feedStatusFilter.value;
            if (selectedStatus === 'all') {
              renderFeeds(feeds);
            } else {
              const filteredFeeds = feeds.filter(feed => {
                if (selectedStatus === 'active') return feed.active;
                if (selectedStatus === 'inactive') return !feed.active;
                return true;
              });
              renderFeeds(filteredFeeds);
            }
            
            deleteIndex = -1;
            
            // Show success message
            showToast('danger', 'Feed deleted successfully');
          });
          
          // Helper function to show toast notifications
          function showToast(type, message) {
            const toastEl = document.createElement('div');
            toastEl.className = \`toast align-items-center text-white bg-\${type} border-0 position-fixed bottom-0 end-0 m-3\`;
            toastEl.setAttribute('role', 'alert');
            toastEl.setAttribute('aria-live', 'assertive');
            toastEl.setAttribute('aria-atomic', 'true');
            
            toastEl.innerHTML = \`
              <div class="d-flex">
                <div class="toast-body">
                  <i class="fas fa-\${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                  \${message}
                </div>
                <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
              </div>
            \`;
            
            document.body.appendChild(toastEl);
            const toast = new bootstrap.Toast(toastEl);
            toast.show();
            
            // Auto-remove after it's hidden
            toastEl.addEventListener('hidden.bs.toast', function() {
              document.body.removeChild(toastEl);
            });
          }
        });
      </script>
    `
}) %>